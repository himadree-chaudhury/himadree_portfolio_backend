// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// *==================== User ====================*
// %User model with fields for authentication, profile, role, and relations to blogs, favorites, and comments
model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String?
  password  String?
  image     String?
  role      UserRole   @default(USER)
  isBlocked Boolean    @default(false)
  blogs     Blog[]
  favorites Favorite[]
  comments  Comment[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// *==================== Blog ====================*
// %Main blog model with relations to categories, tags, author, comments, favorites, and galleries
model Blog {
  id         Int            @id @default(autoincrement())
  title      String
  slug       String         @unique
  poster     String?
  content    String
  excerpt    String?
  published  Boolean        @default(false)
  authorId   Int
  author     User           @relation(fields: [authorId], references: [id])
  categories BlogCategory[]
  tags       BlogTag[]
  favorites  Favorite[]
  comments   Comment[]
  galleries  BlogGallery[]
  views      Int            @default(0)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model BlogGallery {
  id     Int    @id @default(autoincrement())
  url    String
  blogId Int
  blog   Blog   @relation(fields: [blogId], references: [id])
}

model Category {
  id        Int            @id @default(autoincrement())
  name      String         @unique
  blogs     BlogCategory[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model BlogCategory {
  blogId     Int
  categoryId Int
  blog       Blog     @relation(fields: [blogId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([blogId, categoryId])
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  blogs     BlogTag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model BlogTag {
  blogId Int
  tagId  Int
  blog   Blog @relation(fields: [blogId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@id([blogId, tagId])
}

// *==================== Comment ====================*
// %Comments on blogs with relations to the blog and commenter
model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  blogId      Int
  commenterId Int
  blog        Blog     @relation(fields: [blogId], references: [id])
  commenter   User     @relation(fields: [commenterId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// *==================== Favorite ====================*
// %Join table for users favoring blogs with composite primary key relations to user and blog
model Favorite {
  userId Int
  blogId Int
  user   User @relation(fields: [userId], references: [id])
  blog   Blog @relation(fields: [blogId], references: [id])

  @@id([userId, blogId])
}

// *==================== Project ====================*

model Project {
  id           Int                 @id @default(autoincrement())
  title        String
  description  String
  links        ProjectLink[]
  poster       String?
  excerpt      String?
  technologies ProjectTechnology[]
  galleries    ProjectGallery[]
  views        Int                 @default(0)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

model ProjectGallery {
  id        Int     @id @default(autoincrement())
  url       String
  projectId Int
  project   Project @relation(fields: [projectId], references: [id])
}

model ProjectLink {
  id        Int     @id @default(autoincrement())
  name      String
  url       String
  projectId Int
  project   Project @relation(fields: [projectId], references: [id])
}

// *==================== Case-Study ====================*

model CaseStudy {
  id           Int                   @id @default(autoincrement())
  title        String
  content      String
  links        CaseStudyLink[]
  poster       String?
  excerpt      String?
  technologies CaseStudyTechnology[]
  galleries    CaseStudyGallery[]
  views        Int                   @default(0)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model CaseStudyGallery {
  id          Int       @id @default(autoincrement())
  url         String
  caseStudyId Int
  caseStudy   CaseStudy @relation(fields: [caseStudyId], references: [id])
}

model CaseStudyLink {
  id          Int       @id @default(autoincrement())
  name        String
  url         String
  caseStudyId Int
  caseStudy   CaseStudy @relation(fields: [caseStudyId], references: [id])
}

// *==================== Technology ====================*
// %Technology model with relations to projects and case studies through join tables 
model Technology {
  id          Int                   @id @default(autoincrement())
  name        String                @unique
  projects    ProjectTechnology[]
  caseStudies CaseStudyTechnology[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
}

model ProjectTechnology {
  id           Int        @id @default(autoincrement())
  projectId    Int
  technologyId Int
  project      Project    @relation(fields: [projectId], references: [id])
  technology   Technology @relation(fields: [technologyId], references: [id])

  @@unique([projectId, technologyId])
}

model CaseStudyTechnology {
  id           Int        @id @default(autoincrement())
  caseStudyId  Int
  technologyId Int
  caseStudy    CaseStudy  @relation(fields: [caseStudyId], references: [id])
  technology   Technology @relation(fields: [technologyId], references: [id])

  @@unique([caseStudyId, technologyId])
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}
